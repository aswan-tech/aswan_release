<?php/** * Magento Model to override core sales order payment model to set order status as "Created" when creating credit memo * * This model overrides function refund. * * @category    FCM * @package     FCM_Fulfillment * @author	Pawan Prakash Gupta * @author_id	51405591 * @company	HCL Technologies * @created Monday, August 13, 2012 * @copyright	Four cross media *//** * Orderpayment model class * * @category    FCM * @package     FCM_Fulfillment * @author      Pawan Prakash Gupta <51405591> */ class FCM_Fulfillment_Model_Salespayment extends Mage_Sales_Model_Order_Payment{   /**     * Refund payment online or offline, depending on whether there is invoice set in the creditmemo instance     * Updates transactions hierarchy, if required     * Updates payment totals, updates order status and adds proper comments     *     * @param Mage_Sales_Model_Order_Creditmemo $creditmemo     * @return Mage_Sales_Model_Order_Payment     */    public function refund($creditmemo)    {        $baseAmountToRefund = $this->_formatAmount($creditmemo->getBaseGrandTotal());        $order = $this->getOrder();        $this->_generateTransactionId(Mage_Sales_Model_Order_Payment_Transaction::TYPE_REFUND);        // call refund from gateway if required        $isOnline = false;        $gateway = $this->getMethodInstance();        $invoice = null;        if ($gateway->canRefund() && $creditmemo->getDoTransaction()) {            $this->setCreditmemo($creditmemo);            $invoice = $creditmemo->getInvoice();            if ($invoice) {                $isOnline = true;                $captureTxn = $this->_lookupTransaction($invoice->getTransactionId());                if ($captureTxn) {                    $this->setParentTransactionId($captureTxn->getTxnId());                }                $this->setShouldCloseParentTransaction(true); // TODO: implement multiple refunds per capture                try {                    $gateway->setStore($this->getOrder()->getStoreId())                        ->processBeforeRefund($invoice, $this)                        ->refund($this, $baseAmountToRefund)                        ->processCreditmemo($creditmemo, $this)                    ;                } catch (Mage_Core_Exception $e) {                    if (!$captureTxn) {                        $e->setMessage(' ' . Mage::helper('sales')->__('If the invoice was created offline, try creating an offline creditmemo.'), true);                    }                    throw $e;                }            }        }        // update self totals from creditmemo        $this->_updateTotals(array(            'amount_refunded' => $creditmemo->getGrandTotal(),            'base_amount_refunded' => $baseAmountToRefund,            'base_amount_refunded_online' => $isOnline ? $baseAmountToRefund : null,            'shipping_refunded' => $creditmemo->getShippingAmount(),            'base_shipping_refunded' => $creditmemo->getBaseShippingAmount(),        ));        // update transactions and order state        $transaction = $this->_addTransaction(            Mage_Sales_Model_Order_Payment_Transaction::TYPE_REFUND,            $creditmemo,            $isOnline        );        if ($invoice) {            $message = Mage::helper('sales')->__('Refunded amount of %s online.', $this->_formatPrice($baseAmountToRefund));        } else {            $message = $this->hasMessage() ? $this->getMessage()                : Mage::helper('sales')->__('Refunded amount of %s offline.', $this->_formatPrice($baseAmountToRefund));        }        $message = $message = $this->_prependMessage($message);        $message = $this->_appendTransactionToMessage($transaction, $message);				if ($order->getState() == 'processing' and $order->getStatus() == 'created') {			$order->setState(Mage_Sales_Model_Order::STATE_PROCESSING, 'created', $message);		} else {		    $order->setState(Mage_Sales_Model_Order::STATE_PROCESSING, true, $message);		}			        Mage::dispatchEvent('sales_order_payment_refund', array('payment' => $this, 'creditmemo' => $creditmemo));        return $this;    }}