<?php/** * Observer Model  * * Model to run code for events tracked related to premium packaging * * @category    FCM * @package     FCM_Packaging * @author	Pawan Prakash Gupta * @author_id	51405591 * @company	HCL Technologies * @created Tuesday, September 25, 2012 * @copyright	Four cross media *//** * Observer model class * * @category    FCM * @package     FCM_Packaging * @author      Pawan Prakash Gupta <51405591> */ class FCM_Packaging_Model_Observer 	{		 		public function itemToOrderItem($evt)		{			//commenting code as this fetaure is being disabled tempriorly			/*			$orderItem = $evt->getOrderItem();			$item = $evt->getItem();			$orderItem->setPckOption($item->getPckOption());			$orderItem->setPckSku($item->getPckSku());			$orderItem->setPckQty($item->getPckQty());			*/		}				public function itemToQuoteItem($evt)		{			//commenting code as this fetaure is being disabled tempriorly			/*			$orderItem = $evt->getOrderItem();			$item = $evt->getQuoteItem();						$item->setPckOption($orderItem->getPckOption());			$item->setPckSku($orderItem->getPckSku());			$item->setPckQty($orderItem->getPckQty());			*/		}				public function orderToQuote($evt)		{			//commenting code as this fetaure is being disabled tempriorly			/*			$order = $evt->getOrder();			$quote = $evt->getQuote();						foreach($quote->getAllItems() as $_item) {			   if($parentQuote = $_item->getParentItem()) {					if ($parentQuote->getProductType() === 'configurable') {						$pckOpt = $_item->getPckOption();						$pckSku = $_item->getPckSku();						$pckQty = $_item->getPckQty();												//$parentQuote = Mage::getModel("sales/quote_item")->load($_item->getParentItemId());						$parentQuote->setPckOption($pckOpt);						$parentQuote->setPckSku($pckSku);						$parentQuote->setPckQty($pckQty);						$parentQuote->save();												$_item->setPckOption(0);						$_item->setPckSku(NULL);						$_item->setPckQty(NULL);												$_item->save();					}				}			}						//$item->setPckOption($orderItem->getPckOption());			//$item->setPckSku($orderItem->getPckSku());			//$item->setPckQty($orderItem->getPckQty());			*/		}				public function processData($evt)		{			/*				$eventData = array(				'order_create_model' => $this->_getOrderCreateModel(),				'request_model'      => $this->getRequest(),				'session'            => $this->_getSession(),				);			*/			/*			$requestModel = $evt->getRequestModel();			$orderCreateModel = $evt->getOrderCreateModel();			$session = $evt->getSession();			//$pr=$requestModel->getPost();$p=serialize($pr); Mage::log($p);			$storeId = $session->getStore()->getId();						if ($requestModel->getPost('update_items')) {				$items = $requestModel->getPost('item', array());				//$items = $this->_processFiles($items);				//$this->_getOrderCreateModel()->updateQuoteItems($items);								if (is_array($items)) {					try {						$premium = array();						$requested = array();						$perrors = array();													foreach ($items as $itemId => $info) {							//Check if the product is a premium packaging product							$item = $session->getQuote()->getItemById($itemId);							$itemSku = $item->getSku();														$productModel = Mage::getModel('catalog/product');							$categoryModel = Mage::getModel('catalog/category');														$product = $productModel->loadByAttribute('sku', $itemSku);														$categoryIds = $product->getCategoryIds();														$isPremium = false;														$isPremium	=	Mage::getModel('packaging/packaging')->bool_isPremiumPackaging($categoryIds);														if ($isPremium) {								$premium[$itemSku] = $itemId;							} else {								$itemPckSku = $info['pck_sku'];							//Mage::log('itemPckSku'. $itemPckSku);									//Check for whether product is premium or not can be done here, associated to product or not								$prksu = $product->getPremiumPackagingSku();								//Mage::log('prksu'. $prksu);									if (!empty($itemPckSku) and empty($prksu)) {									$perrors[] = "Product with SKU ". $itemSku ." has no packaging product associated with it";									$items[$itemId]['pck_sku'] = '';									//Mage::log('no item');									continue;								} else if (!empty($itemPckSku) and ($prksu != $itemPckSku)) {									//Not a packaging for the product selected									$perrors[] = "Product with SKU ". $itemPckSku ." is not a packaging product for SKU ". $itemSku;									$items[$itemId]['pck_sku'] = '';									//Mage::log('item do not match');									continue;								} else if (!empty($itemPckSku)) {									//Not a packaging product									$pckProduct = $productModel->loadByAttribute('sku', $itemPckSku);									$pckCategoryIds = $pckProduct->getCategoryIds();									//Mage::log('not packing');									$pckIsPremium = false;																		$pckIsPremium	=	Mage::getModel('packaging/packaging')->bool_isPremiumPackaging($pckCategoryIds);																		if (!$pckIsPremium) {										//Not a packaging product										$perrors[] = "Product with SKU ". $itemPckSku ." is not a packaging product.";										$items[$itemId]['pck_sku'] = '';																				continue;									}								}																if (!empty($itemPckSku)) {																		if (empty($info['pck_qty'])) {										$info['pck_qty'] = $info['qty'];									}																											if ($info['pck_qty'] > $info['qty']) {										$info['pck_qty'] = $info['qty'];									}																		$itemPckQty = $info['pck_qty'];									$items[$itemId]['pck_qty'] = $itemPckQty;									$items[$itemId]['pck_opt'] = 1;																		if ($info['action'] != 'remove') {										$requested[$itemPckSku] += $itemPckQty;									}								} else {									$items[$itemId]['pck_qty'] = 0;								}							}										}												if (count($perrors) > 0) {							$session->addError(implode("<br />", $perrors));						}												$newPremium = array();						$delPremium = array();						$updatePremium = array();												if (count($requested) > 0 and count($premium) > 0 ) {							$newPremium = array_diff_key($requested, $premium);							$delPremium = array_diff_key($premium, $requested);							$updatePremium = array_diff_key($requested, $newPremium);						} else if (count($requested) > 0) {							$newPremium = $requested;						}  else if (count($premium) > 0) {							$delPremium = $premium;						}						//$pr=$requestModel->getPost();$p=serialize($pr); Mage::log($p);												if (count($newPremium) > 0) {							$rs = $this->_addPremiumProductsBySku($newPremium, $orderCreateModel, $storeId, $session);							if (is_array($rs)) {								//Remove premium sku for products assigned [Show Error]																foreach ($items as $itemId => $info) {									$itPckSku = $info['pck_sku'];									if (in_array($itPckSku, $rs)) {										$items[$itemId]['pck_sku'] = '';										$items[$itemId]['pck_sku'] = 0;									}								}																$session->addError('Product SKU\'s "'. implode(", ", $rs) .'" do not exist.');							}						}												if (count($updatePremium) > 0) {							foreach ($updatePremium as $s=>$q) {								$i = $premium[$s];								$items[$i]['qty'] = $q;							}						}												if (count($delPremium) > 0) {							foreach ($delPremium as $sku=>$itm) {								$items[$itm]['action'] = 'remove';							}						}						//Mage::log("Items=". serialize($items));						$requestModel->setPost('item', $items);											} catch (Exception $e) {						//Mage::logException($e);					}				}			}			*/				}	/*			protected function _addPremiumProductsBySku($addBySkuItems, $storeId, $orderCreateModel, $session)		{				foreach ($addBySkuItems as $sku => $qty) {				$product = Mage::getModel('catalog/product')					->setStoreId($storeId)					->loadByAttribute('sku', $sku);				if ($product->getId()) {Mage::log('add product');					$product->setSkipCheckRequiredOption(true);Mage::log('add product 2');					$item = $session->getQuote()->addProduct($product, $qty);						}			}		}	*/					protected function _addPremiumProductsBySku($addBySkuItems, $orderCreateModel, $storeId, $session)		{			//commenting code as this fetaure is being disabled tempriorly			/*			$notAdded = array();						foreach ($addBySkuItems as $sku => $qty) {				try {					$product = Mage::getModel('catalog/product')						->loadByAttribute('sku', $sku);										if ($product instanceof Mage_Catalog_Model_Product) {						$pid = $product->getId();						$item = $orderCreateModel->addProduct($pid, $qty);							} else {						$notAdded[] = $sku;					}				} catch (Exception $e) {					$notAdded[] = $sku;					//Mage::log($e->getMessage());				}			}						if (count($notAdded) > 0) {				return $notAdded;			} else {				return true;			}			*/		}				protected function _addPremiumProductsBySku1($addBySkuItems, $orderCreateModel, $storeId, $session)		{			/*			$cart = $this->_getBackendCart($storeId, $session);						if (empty($cart)) {				return;			}						foreach ($addBySkuItems as $sku => $qty) {				$items[] = array('sku' => $sku, 'qty' => $qty);			}						$cart->prepareAddProductsBySku($items);						//foreach ($addBySkuItems as $sku => $qty) {			//	$cart->prepareAddProductBySku($sku, $qty);			//}			*/			/* @var $orderCreateModel Mage_Adminhtml_Model_Sales_Order_Create */			/*			$cart->saveAffectedProducts($orderCreateModel, false);						return;			*/		}						/**		 * Get cart model instance		 *		 * @return Enterprise_Checkout_Model_Cart		 */		protected function _getCart()		{			return Mage::getSingleton('enterprise_checkout/cart');		}				/**		 * Returns cart model for backend		 *		 * @param int 		 * @return Enterprise_Checkout_Model_Cart		 */		protected function _getBackendCart($storeId, $session)		{			return $this->_getCart()				->setSession($session)				->setContext(Enterprise_Checkout_Model_Cart::CONTEXT_ADMIN_ORDER)				->setCurrentStore((int)$storeId);		}	}?>