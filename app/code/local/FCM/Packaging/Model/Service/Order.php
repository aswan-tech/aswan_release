<?php/** * Magento Model to override core sales service order model * * * @category    FCM * @package     FCM_Packaging * @author	Pawan Prakash Gupta * @author_id	51405591 * @company	HCL Technologies * @created Thursday, September 27, 2012 * @copyright	Four cross media *//** * Model sales service order class * * @category    FCM * @package     FCM_Packaging * @author      Pawan Prakash Gupta <51405591> */ class FCM_Packaging_Model_Service_Order extends Mage_Sales_Model_Service_Order{   /**     * Prepare order creditmemo based on order items and requested params     *     * @param array $data     * @return Mage_Sales_Model_Order_Creditmemo     */    public function prepareCreditmemo($data = array())    {        $totalQty = 0;        $creditmemo = $this->_convertor->toCreditmemo($this->_order);        $qtys = isset($data['qtys']) ? $data['qtys'] : array();						$skMap = array();		if (count($qtys) > 0) {					foreach ($data['items'] as $orderItemId => $itemData) {                if (!empty($itemData['pck_sku'])) {					$skMap[$orderItemId] = $itemData['pck_qty'];				}            }		}				$itemMap = array();		foreach ($this->_order->getAllItems() as $orderItem) {			$itm = $orderItem->getSku();			$itemMap[$itm] = $orderItem;		}		foreach ($this->_order->getAllItems() as $orderItem) {					if($item instanceof Mage_Sales_Model_Order_Item){				if (!$this->_canRefundItem($orderItem, $qtys)) {					continue;				}			}            $item = $this->_convertor->itemToCreditmemoItem($orderItem);						//+++++++++++++++++++++++++++++++++++++++++++++++//						//+++++++++++++++++++++++++++++++++++++++++++++++//			            if ($orderItem->isDummy()) {                $qty = 1;                $orderItem->setLockedDoShip(true);            } else {                if (isset($qtys[$orderItem->getId()])) {                    $qty = (float) $qtys[$orderItem->getId()];                } elseif (!count($qtys)) {                    $qty = $orderItem->getQtyToRefund();                } else {                    continue;                }            }						//++++++++++++++++++++++++++++++++++++++++++++++++//			$pcksku = $orderItem->getPckSku();			$canRefundPck = false;						if (!empty($pcksku) and count($itemMap) > 0) {				$pckItm = $itemMap[$pcksku];								if($item instanceof Mage_Sales_Model_Order_Item){					if ($this->_canRefundItem($pckItm, $qtys)) {						$canRefundPck = true;					}				}			}						$item->setPckOption($orderItem->getPckOption());			//$item->setPckSku($orderItem->getPckSku());			$item->setPckSku($pcksku);						if ($canRefundPck and (count($qtys) > 0)) {				$oid = $orderItem->getId();								if (isset($skMap[$oid])) {					$item->setPckQty($skMap[$oid], $qty, true);				} else {					$item->setPckQty($orderItem->getPckQty(), $qty, false);				}			} else {				$item->setPckQty($orderItem->getPckQty(), $qty, false);			}						$item->setPckCanRefund($canRefundPck);						//Check if product is a premium packaging product or not			/*			$productSku = $item->getSku();			$categoryIds = Mage::getModel('catalog/product')->loadByAttribute('sku', $productSku)->getCategoryIds();					$isPremiumPackaging = false;						$isPremiumPackaging	=	Mage::getModel('packaging/packaging')->bool_isPremiumPackaging($categoryIds);						$item->setIsPackagingProduct($isPremiumPackaging);			*/			//++++++++++++++++++++++++++++++++++++++++++++++++//			            $totalQty += $qty;            $item->setQty($qty);            $creditmemo->addItem($item);        }        $creditmemo->setTotalQty($totalQty);        $this->_initCreditmemoData($creditmemo, $data);        $creditmemo->collectTotals();        return $creditmemo;    }}